# -*- coding: utf-8 -*-
"""calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dKvk7kZzZBh5VAysbV3nMHmzcnq1-TuX
"""

import math
import sympy as sp

class ScientificCalculator:
    def __init__(self):
        self.history = []

    def add_to_history(self, expression, result):
        self.history.append((expression, result))

    def display_history(self):
        print("\nCalculation History:")
        for i, (expr, res) in enumerate(self.history, 1):
            print(f"{i}. {expr} = {res}")

    def calculate(self, expression, precision=4):
        try:
            # Replace mathematical functions with their Python equivalents
            expression = expression.replace('^', '**')
            expression = expression.replace('log10', 'math.log10')
            expression = expression.replace('log', 'math.log')
            expression = expression.replace('sin', 'math.sin(math.radians')
            expression = expression.replace('cos', 'math.cos(math.radians')
            expression = expression.replace('tan', 'math.tan(math.radians')
            expression = expression.replace('asin', 'math.degrees(math.asin')
            expression = expression.replace('acos', 'math.degrees(math.acos')
            expression = expression.replace('atan', 'math.degrees(math.atan')
            expression = expression.replace('sinh', 'math.sinh')
            expression = expression.replace('cosh', 'math.cosh')
            expression = expression.replace('tanh', 'math.tanh')
            expression = expression.replace('sqrt', 'math.sqrt')

            # Ensure parentheses are properly closed for trigonometric functions
            expression = expression.replace('math.sin(math.radians', 'math.sin(math.radians(')
            expression = expression.replace('math.cos(math.radians', 'math.cos(math.radians(')
            expression = expression.replace('math.tan(math.radians', 'math.tan(math.radians(')
            expression = expression.replace('math.degrees(math.asin', 'math.degrees(math.asin(')
            expression = expression.replace('math.degrees(math.acos', 'math.degrees(math.acos(')
            expression = expression.replace('math.degrees(math.atan', 'math.degrees(math.atan(')

            # Evaluate the expression safely
            result = eval(expression, {"math": math, "sp": sp}, {})
            result = round(result, precision)  # Apply precision here
            self.add_to_history(expression, result)
            return result
        except ZeroDivisionError:
            return "Error: Division by zero"
        except Exception as e:
            return f"Error: Invalid input ({e})"

    def run(self):
        print("Welcome to the Scientific Calculator!")
        print("You can enter expressions like 'sin(45) + log10(100)'. Type 'exit' to quit.")
        print("To view calculation history, type 'history'.")

        while True:
            user_input = input("\nEnter your expression: ").strip()

            if user_input.lower() == 'exit':
                print("Goodbye!")
                break

            if user_input.lower() == 'history':
                self.display_history()
                continue

            try:
                precision = int(input("Enter decimal precision (default 4): ") or 4)
            except ValueError:
                print("Invalid precision. Using default precision (4).")
                precision = 4

            result = self.calculate(user_input, precision)
            print(f"Result: {result}")

if __name__ == "__main__":
    calculator = ScientificCalculator()
    calculator.run()